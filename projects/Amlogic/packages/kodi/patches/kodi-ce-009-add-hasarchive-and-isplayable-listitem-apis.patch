From bdf49cc540bd415052acf8338b2ff6c86c8bf406 Mon Sep 17 00:00:00 2001
From: Arthur Liberman <arthur_liberman@hotmail.com>
Date: Fri, 19 Apr 2019 14:59:51 +0300
Subject: [PATCH 1/2] add-hasarchive-and-isplayable-listitem-apis

---
 addons/skin.estouchy/media/epg_archive.png    | Bin 0 -> 416 bytes
 addons/skin.estouchy/xml/ViewsPVR.xml         |  16 ++++++++++++
 .../media/icons/pvr/PVR-HasArchive.png        | Bin 0 -> 738 bytes
 .../media/windows/pvr/archive.png             | Bin 0 -> 417 bytes
 addons/skin.estuary/xml/Variables.xml         |   3 +++
 xbmc/GUIInfoManager.cpp                       |  12 +++++++++
 xbmc/guilib/guiinfo/GUIInfoLabels.h           |   2 ++
 xbmc/interfaces/json-rpc/schema/types.json    |  10 +++++---
 xbmc/pvr/PVRGUIInfo.cpp                       |  14 ++++++++++
 xbmc/pvr/channels/PVRChannel.cpp              |  24 ++++++++++++++++--
 xbmc/pvr/channels/PVRChannel.h                |   6 +++++
 11 files changed, 81 insertions(+), 6 deletions(-)
 create mode 100644 addons/skin.estouchy/media/epg_archive.png
 create mode 100644 addons/skin.estuary/media/icons/pvr/PVR-HasArchive.png
 create mode 100644 addons/skin.estuary/media/windows/pvr/archive.png

diff --git a/addons/skin.estouchy/xml/ViewsPVR.xml b/addons/skin.estouchy/xml/ViewsPVR.xml
index a9290088c5..4b13e86584 100644
--- a/addons/skin.estouchy/xml/ViewsPVR.xml
+++ b/addons/skin.estouchy/xml/ViewsPVR.xml
@@ -324,6 +324,14 @@
 					<texture>epg_schedule.png</texture>
 					<visible>ListItem.HasTimer</visible>
 				</control>
+				<control type="image">
+					<posx>5</posx>
+					<posy>45</posy>
+					<width>20</width>
+					<height>20</height>
+					<texture>epg_archive.png</texture>
+					<visible>![ListItem.IsRecording | ListItem.HasTimer] + ListItem.IsPlayable</visible>
+				</control>
 			</itemlayout>
 			<focusedlayout width="40" height="65">
 				<control type="image" id="2">
@@ -370,6 +378,14 @@
 					<texture>epg_schedule.png</texture>
 					<visible>ListItem.HasTimer</visible>
 				</control>
+				<control type="image">
+					<posx>7</posx>
+					<posy>44</posy>
+					<width>15</width>
+					<height>15</height>
+					<texture>epg_archive.png</texture>
+					<visible>![ListItem.IsRecording | ListItem.HasTimer] + ListItem.IsPlayable</visible>
+				</control>
 			</focusedlayout>
 		</control>
 	</include>
diff --git a/addons/skin.estuary/xml/Variables.xml b/addons/skin.estuary/xml/Variables.xml
index e4963c6bd5..bcc352d10a 100644
--- a/addons/skin.estuary/xml/Variables.xml
+++ b/addons/skin.estuary/xml/Variables.xml
@@ -3,6 +3,7 @@
 	<variable name="PVRStatusImageVar">
 		<value condition="ListItem.IsRecording">windows/pvr/record.png</value>
 		<value condition="ListItem.HasTimer | ListItem.HasTimerSchedule">windows/pvr/timer.png</value>
+		<value condition="ListItem.HasArchive">windows/pvr/archive.png</value>
 	</variable>
 	<variable name="AutoCompletionContentVar">
 		<value condition="System.HasAddon(plugin.program.autocompletion) + !System.HasHiddenInput">plugin://plugin.program.autocompletion?info=autocomplete&amp;&amp;id=$INFO[Control.GetLabel(312).index(1)]&amp;&amp;limit=9</value>
@@ -337,6 +338,7 @@
 		<value condition="ListItem.IsCollection">overlays/set.png</value>
 		<value condition="ListItem.IsPlaying">overlays/watched/OverlayPlaying-List.png</value>
 		<value condition="ListItem.IsResumable">overlays/watched/resume.png</value>
+		<value condition="ListItem.HasArchive">windows/pvr/archive.png</value>
 		<value condition="Integer.IsGreater(ListItem.Playcount,0)">$INFO[ListItem.Overlay]</value>
 	</variable>
 	<!-- Breadcrumbs -->
@@ -428,6 +430,7 @@
 		<value condition="ListItem.HasTimer + !ListItem.TimerIsActive">icons/pvr/PVR-HasTimerDisabled.png</value>
 		<value condition="ListItem.HasTimerSchedule">icons/pvr/PVR-HasTimerSchedule.png</value>
 		<value condition="ListItem.HasTimer">icons/pvr/PVR-HasTimer.png</value>
+		<value condition="ListItem.IsPlayable">icons/pvr/PVR-HasArchive.png</value>
 	</variable>
 	<variable name="SeasonEpisodeLabel">
 		<value condition="String.IsEmpty(ListItem.EpisodeName)">$INFO[ListItem.Season,S]$INFO[ListItem.Episode,E]</value>
diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index 683d0f71b5..d6a89155d9 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -3665,6 +3665,16 @@ const infomap container_str[]  = {{ "property",         CONTAINER_PROPERTY },
 ///     @return **True** when the selected programme is being recorded (PVR).
 ///     <p>
 ///   }
+///   \table_row3{   <b>`ListItem.IsPlayable`</b>,
+///                  \anchor ListItem_IsPlayable
+///                  _boolean_,
+///     Returns true when the selected programme can be played (PVR)
+///   }
+///   \table_row3{   <b>`ListItem.HasArchive`</b>,
+///                  \anchor ListItem_HasArchive
+///                  _boolean_,
+///     Returns true when the selected channel has a server-side back buffer (PVR)
+///   }
 ///   \table_row3{   <b>`ListItem.IsEncrypted`</b>,
 ///                  \anchor ListItem_IsEncrypted
 ///                  _boolean_,
@@ -5776,6 +5786,8 @@ const infomap listitem_labels[]= {{ "thumb",            LISTITEM_THUMB },
                                   { "hastimerschedule", LISTITEM_HASTIMERSCHEDULE },
                                   { "hasrecording",     LISTITEM_HASRECORDING },
                                   { "isrecording",      LISTITEM_ISRECORDING },
+                                  { "isplayable",       LISTITEM_ISPLAYABLE },
+                                  { "hasarchive",       LISTITEM_HASARCHIVE },
                                   { "inprogress",       LISTITEM_INPROGRESS },
                                   { "isencrypted",      LISTITEM_ISENCRYPTED },
                                   { "progress",         LISTITEM_PROGRESS },
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index 47c5831d29..4d82980c61 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -867,6 +867,8 @@
 #define LISTITEM_EXPIRATION_TIME    (LISTITEM_START + 181)
 #define LISTITEM_PROPERTY           (LISTITEM_START + 182)
 #define LISTITEM_EPG_EVENT_ICON     (LISTITEM_START + 183)
+#define LISTITEM_HASARCHIVE         (LISTITEM_START + 184)
+#define LISTITEM_ISPLAYABLE         (LISTITEM_START + 185)
 
 #define LISTITEM_END                (LISTITEM_START + 2500)
 
diff --git a/xbmc/interfaces/json-rpc/schema/types.json b/xbmc/interfaces/json-rpc/schema/types.json
index 486e46fc1a..3c368c9058 100644
--- a/xbmc/interfaces/json-rpc/schema/types.json
+++ b/xbmc/interfaces/json-rpc/schema/types.json
@@ -977,7 +977,7 @@
                 "firstaired", "hastimer", "isactive", "parentalrating",
                 "wasactive", "thumbnail", "rating", "originaltitle", "cast",
                 "director", "writer", "year", "imdbnumber", "hastimerrule",
-                "hasrecording", "recording", "isseries" ]
+                "hasrecording", "recording", "isseries", "isplayable" ]
     }
   },
   "PVR.Details.Broadcast": {
@@ -1012,7 +1012,8 @@
       "hastimerrule": { "type": "boolean" },
       "hasrecording": { "type": "boolean" },
       "recording": { "type": "string" },
-      "isseries": { "type": "boolean" }
+      "isseries": { "type": "boolean" },
+      "isplayable": { "type": "boolean" }
     }
   },
   "PVR.Fields.Channel": {
@@ -1020,7 +1021,7 @@
     "items": { "type": "string",
       "enum": [ "thumbnail", "channeltype", "hidden", "locked", "channel", "lastplayed",
                 "broadcastnow", "broadcastnext", "uniqueid", "icon", "channelnumber",
-                "subchannelnumber", "isrecording" ]
+                "subchannelnumber", "isrecording", "hasarchive" ]
     }
   },
   "PVR.Details.Channel": {
@@ -1039,7 +1040,8 @@
       "icon": { "type": "string" },
       "channelnumber": { "type": "integer" },
       "subchannelnumber": { "type": "integer" },
-      "isrecording": { "type": "boolean" }
+      "isrecording": { "type": "boolean" },
+      "hasarchive": { "type": "boolean" }
     }
   },
   "PVR.Details.ChannelGroup": {
diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index 7988e610c5..b48937cee1 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -1107,6 +1107,20 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
 {
   switch (info.m_info)
   {
+    case LISTITEM_HASARCHIVE:
+      if (item->IsPVRChannel())
+      {
+        bValue = item->GetPVRChannelInfoTag()->HasArchive();
+        return true;
+      }
+      break;
+    case LISTITEM_ISPLAYABLE:
+      if (item->IsEPG())
+      {
+        bValue = item->GetEPGInfoTag()->IsPlayable();
+        return true;
+      }
+      break;
     case LISTITEM_ISRECORDING:
       if (item->IsPVRChannel())
       {
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index 3ddc457369..845c86029a 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -46,6 +46,7 @@ CPVRChannel::CPVRChannel(bool bRadio /* = false */)
   m_bIsLocked               = false;
   m_iLastWatched            = 0;
   m_bChanged                = false;
+  m_bHasArchive             = false;
 
   m_iEpgId                  = -1;
   m_bEPGEnabled             = true;
@@ -70,7 +71,17 @@ CPVRChannel::CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId)
   m_strChannelName          = channel.strChannelName;
   m_iUniqueId               = channel.iUniqueId;
   m_strClientChannelName    = channel.strChannelName;
-  m_strInputFormat          = channel.strInputFormat;
+  // CoreELEC specific: use strInputFormat to indicate the presence of archive support.
+  if (strcmp(channel.strInputFormat, "iptv/hasarchive") == 0)
+  {
+    m_strInputFormat        = "";
+    m_bHasArchive           = true;
+  }
+  else
+  {
+    m_strInputFormat        = channel.strInputFormat;
+    m_bHasArchive           = false;
+  }
   m_iClientEncryptionSystem = channel.iEncryptionSystem;
   m_iClientId               = iClientId;
   m_iLastWatched            = 0;
@@ -113,6 +124,7 @@ void CPVRChannel::Serialize(CVariant& value) const
     epg->Serialize(value["broadcastnext"]);
 
   value["isrecording"] = false; // compat
+  value["hasarchive"] = m_bHasArchive;
 }
 
 /********** XBMC related channel methods **********/
@@ -176,12 +188,14 @@ bool CPVRChannel::UpdateFromClient(const CPVRChannelPtr &channel)
   if (m_clientChannelNumber     != channel->m_clientChannelNumber ||
       m_strInputFormat          != channel->InputFormat() ||
       m_iClientEncryptionSystem != channel->EncryptionSystem() ||
-      m_strClientChannelName    != channel->ClientChannelName())
+      m_strClientChannelName    != channel->ClientChannelName() ||
+      m_bHasArchive             != channel->HasArchive())
   {
     m_clientChannelNumber     = channel->m_clientChannelNumber;
     m_strInputFormat          = channel->InputFormat();
     m_iClientEncryptionSystem = channel->EncryptionSystem();
     m_strClientChannelName    = channel->ClientChannelName();
+    m_bHasArchive             = channel->HasArchive();
 
     UpdateEncryptionName();
     SetChanged();
@@ -299,6 +313,12 @@ void CPVRChannel::SetRadioRDSInfoTag(const std::shared_ptr<CPVRRadioRDSInfoTag>&
   m_rdsTag = tag;
 }
 
+bool CPVRChannel::HasArchive(void) const
+{
+  CSingleLock lock(m_critSection);
+  return m_bHasArchive;
+}
+
 bool CPVRChannel::SetIconPath(const std::string &strIconPath, bool bIsUserSetIcon /* = false */)
 {
   CSingleLock lock(m_critSection);
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index cf040c3e58..6c6d5f288c 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -150,6 +150,11 @@ namespace PVR
      */
     void SetRadioRDSInfoTag(const std::shared_ptr<CPVRRadioRDSInfoTag>& tag);
 
+    /*!
+     * @return True if this channel has a server-side back buffer, false otherwise
+     */
+    bool HasArchive(void) const;
+
     /*!
      * @return The path to the icon for this channel.
      */
@@ -439,6 +444,7 @@ namespace PVR
     time_t           m_iLastWatched;            /*!< last time channel has been watched */
     bool             m_bChanged;                /*!< true if anything in this entry was changed that needs to be persisted */
     CPVRChannelNumber m_channelNumber;          /*!< the number this channel has in the currently selected channel group */
+    bool             m_bHasArchive;             /*!< true if this channel supports archive */
     std::shared_ptr<CPVRRadioRDSInfoTag> m_rdsTag; /*! < the radio rds data, if available for the channel. */
     //@}
 
-- 
2.20.1.windows.1

