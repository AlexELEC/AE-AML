From c9c849f059f7a00c84d6e07316832ab51e1db5da Mon Sep 17 00:00:00 2001
From: Arthur Liberman <arthur_liberman@hotmail.com>
Date: Fri, 19 Apr 2019 15:00:49 +0300
Subject: [PATCH 2/2] add pvr archive support

---
 xbmc/FileItem.cpp                             | 16 +++++
 xbmc/FileItem.h                               |  2 +
 .../VideoPlayer/DVDDemuxers/CMakeLists.txt    |  2 +
 .../VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.h  |  4 +-
 .../DVDDemuxers/DVDDemuxFFmpegArchive.cpp     | 71 +++++++++++++++++++
 .../DVDDemuxers/DVDDemuxFFmpegArchive.h       | 24 +++++++
 .../DVDDemuxers/DVDFactoryDemuxer.cpp         | 12 ++++
 .../DVDInputStreams/CMakeLists.txt            |  2 +
 .../DVDInputStreams/DVDFactoryInputStream.cpp | 17 ++++-
 .../DVDInputStreams/DVDInputStream.h          |  5 +-
 .../DVDInputStreamFFmpegArchive.cpp           | 69 ++++++++++++++++++
 .../DVDInputStreamFFmpegArchive.h             | 34 +++++++++
 xbmc/pvr/PVRManager.cpp                       | 18 ++++-
 13 files changed, 269 insertions(+), 7 deletions(-)
 create mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.cpp
 create mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.h
 create mode 100644 xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.cpp
 create mode 100644 xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.h

diff --git a/xbmc/FileItem.cpp b/xbmc/FileItem.cpp
index 2a423fcfc0..cab6a2d947 100644
--- a/xbmc/FileItem.cpp
+++ b/xbmc/FileItem.cpp
@@ -844,11 +844,27 @@ bool CFileItem::IsEPG() const
   return HasEPGInfoTag();
 }
 
+bool CFileItem::IsEPGWithArchive() const
+{
+  if (HasEPGInfoTag())
+  {
+    const std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetChannelForEpgTag(GetEPGInfoTag());
+    if (channel)
+      return channel->HasArchive();
+  }
+  return false;
+}
+
 bool CFileItem::IsPVRChannel() const
 {
   return HasPVRChannelInfoTag();
 }
 
+bool CFileItem::IsPVRChannelWithArchive() const
+{
+  return (HasPVRChannelInfoTag() && GetPVRChannelInfoTag()->HasArchive());
+}
+
 bool CFileItem::IsPVRRecording() const
 {
   return HasPVRRecordingInfoTag();
diff --git a/xbmc/FileItem.h b/xbmc/FileItem.h
index 1e94c0e49e..73326d7929 100644
--- a/xbmc/FileItem.h
+++ b/xbmc/FileItem.h
@@ -222,7 +222,9 @@ public:
   bool IsMusicDb() const;
   bool IsVideoDb() const;
   bool IsEPG() const;
+  bool IsEPGWithArchive() const;
   bool IsPVRChannel() const;
+  bool IsPVRChannelWithArchive() const;
   bool IsPVRRecording() const;
   bool IsUsablePVRRecording() const;
   bool IsDeletedPVRRecording() const;
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt b/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt
index 48710f847c..90c6542dc5 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt
@@ -5,6 +5,7 @@ set(SOURCES DemuxMultiSource.cpp
             DVDDemuxCDDA.cpp
             DVDDemuxClient.cpp
             DVDDemuxFFmpeg.cpp
+            DVDDemuxFFmpegArchive.cpp
             DVDDemuxUtils.cpp
             DVDDemuxVobsub.cpp
             DVDFactoryDemuxer.cpp)
@@ -16,6 +17,7 @@ set(HEADERS DemuxMultiSource.h
             DVDDemuxCDDA.h
             DVDDemuxClient.h
             DVDDemuxFFmpeg.h
+            DVDDemuxFFmpegArchive.h
             DVDDemuxUtils.h
             DVDDemuxVobsub.h
             DVDFactoryDemuxer.h)
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.h
index f7374b438f..c665597e75 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.h
@@ -76,7 +76,7 @@ public:
   CDVDDemuxFFmpeg();
   ~CDVDDemuxFFmpeg() override;
 
-  bool Open(std::shared_ptr<CDVDInputStream> pInput, bool streaminfo = true, bool fileinfo = false);
+  virtual bool Open(std::shared_ptr<CDVDInputStream> pInput, bool streaminfo = true, bool fileinfo = false);
   void Dispose();
   bool Reset() override ;
   void Flush() override;
@@ -121,7 +121,7 @@ protected:
   void ResetVideoStreams();
   AVDictionary *GetFFMpegOptionsFromInput();
   double ConvertTimestamp(int64_t pts, int den, int num);
-  void UpdateCurrentPTS();
+  virtual void UpdateCurrentPTS();
   bool IsProgramChange();
   unsigned int HLSSelectProgram();
 
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.cpp
new file mode 100644
index 0000000000..b1ef0d8eb5
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.cpp
@@ -0,0 +1,71 @@
+/*
+ *  Copyright (C) 2018 Arthur Liberman
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "DVDDemuxFFmpegArchive.h"
+
+#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h" // for DVD_NOPTS_VALUE
+#include "DVDDemuxUtils.h"
+#include "DVDInputStreams/DVDInputStream.h"
+#include "DVDInputStreams/DVDInputStreamFFmpegArchive.h"
+#include "threads/SingleLock.h"
+#include "utils/log.h"
+
+CDVDDemuxFFmpegArchive::CDVDDemuxFFmpegArchive() :
+    m_bIsOpening(false), m_seekOffset(0)
+{ }
+
+bool CDVDDemuxFFmpegArchive::Open(std::shared_ptr<CDVDInputStream> pInput, bool streaminfo, bool fileinfo)
+{
+  m_bIsOpening = true;
+  bool ret = CDVDDemuxFFmpeg::Open(pInput, streaminfo, fileinfo);
+  m_bIsOpening = false;
+  return ret;
+}
+
+bool CDVDDemuxFFmpegArchive::SeekTime(double time, bool backwards, double *startpts)
+{
+  if (!m_pInput || time < 0)
+    return false;
+
+  int whence = m_bIsOpening ? SEEK_CUR : SEEK_SET;
+  int64_t seekResult = m_pInput->Seek(static_cast<int64_t>(time), whence);
+  if (seekResult >= 0)
+  {
+    {
+      CSingleLock lock(m_critSection);
+      m_seekOffset = seekResult;
+    }
+
+    CLog::Log(LOGDEBUG, "Seek successful. m_seekOffset = %f, m_currentPts = %f, time = %f, backwards = %d, startptr = %f",
+      m_seekOffset, m_currentPts, time, backwards, startpts ? *startpts : 0);
+    return m_bIsOpening ? true : Reset();
+  }
+
+  CLog::Log(LOGDEBUG, "Seek failed. m_currentPts = %f, time = %f, backwards = %d, startptr = %f",
+    m_currentPts, time, backwards, startpts ? *startpts : 0);
+  return false;
+}
+
+DemuxPacket* CDVDDemuxFFmpegArchive::Read()
+{
+  DemuxPacket* pPacket = CDVDDemuxFFmpeg::Read();
+  if (pPacket)
+  {
+    CSingleLock lock(m_critSection);
+    pPacket->pts += m_seekOffset;
+    pPacket->dts += m_seekOffset;
+  }
+
+  return pPacket;
+}
+
+void CDVDDemuxFFmpegArchive::UpdateCurrentPTS()
+{
+  CDVDDemuxFFmpeg::UpdateCurrentPTS();
+  if (m_currentPts != DVD_NOPTS_VALUE)
+    m_currentPts += m_seekOffset;
+}
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.h
new file mode 100644
index 0000000000..12c9e4f725
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpegArchive.h
@@ -0,0 +1,24 @@
+/*
+ *  Copyright (C) 2018 Arthur Liberman
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "DVDDemuxFFmpeg.h"
+
+class CDVDDemuxFFmpegArchive : public CDVDDemuxFFmpeg
+{
+public:
+    CDVDDemuxFFmpegArchive();
+    virtual bool Open(std::shared_ptr<CDVDInputStream> pInput, bool streaminfo = true, bool fileinfo = false) override;
+    virtual bool SeekTime(double time, bool backwards = false, double* startpts = NULL) override;
+    virtual DemuxPacket* Read() override;
+protected:
+    virtual void UpdateCurrentPTS() override;
+
+    bool m_bIsOpening;
+    double m_seekOffset;
+};
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
index 59a4b4be76..d04a81f393 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
@@ -11,6 +11,7 @@
 #include "DVDInputStreams/DVDInputStream.h"
 
 #include "DVDDemuxFFmpeg.h"
+#include "DVDDemuxFFmpegArchive.h"
 #include "DVDDemuxBXA.h"
 #include "DVDDemuxCDDA.h"
 #include "DVDDemuxClient.h"
@@ -85,6 +86,17 @@ CDVDDemux* CDVDFactoryDemuxer::CreateDemuxer(std::shared_ptr<CDVDInputStream> pI
       return NULL;
   }
 
+  if (pInputStream->IsStreamType(DVDSTREAM_TYPE_PVR_ARCHIVE))
+  {
+    CLog::Log(LOGDEBUG, "DVDFactoryDemuxer: Create CDVDDemuxFFmpegArchive.");
+    std::unique_ptr<CDVDDemuxFFmpegArchive> demuxer(new CDVDDemuxFFmpegArchive());
+    if (demuxer->Open(pInputStream, streaminfo, fileinfo))
+      return demuxer.release();
+    else
+      return NULL;
+  }
+
+  CLog::Log(LOGDEBUG, "DVDFactoryDemuxer: Create CDVDDemuxFFmpeg.");
   std::unique_ptr<CDVDDemuxFFmpeg> demuxer(new CDVDDemuxFFmpeg());
   if(demuxer->Open(pInputStream, streaminfo, fileinfo))
     return demuxer.release();
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt b/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
index 5f60202bcb..a064f5e215 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
@@ -1,6 +1,7 @@
 set(SOURCES DVDFactoryInputStream.cpp
             DVDInputStream.cpp
             DVDInputStreamFFmpeg.cpp
+            DVDInputStreamFFmpegArchive.cpp
             DVDInputStreamFile.cpp
             DVDInputStreamMemory.cpp
             DVDInputStreamNavigator.cpp
@@ -15,6 +16,7 @@ set(SOURCES DVDFactoryInputStream.cpp
 set(HEADERS DVDFactoryInputStream.h
             DVDInputStream.h
             DVDInputStreamFFmpeg.h
+            DVDInputStreamFFmpegArchive.h
             DVDInputStreamFile.h
             DVDInputStreamMemory.h
             DVDInputStreamNavigator.h
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
index ec6be71976..529879157b 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
@@ -11,6 +11,7 @@
 #include "DVDInputStreamFile.h"
 #include "DVDInputStreamNavigator.h"
 #include "DVDInputStreamFFmpeg.h"
+#include "DVDInputStreamFFmpegArchive.h"
 #include "InputStreamAddon.h"
 #include "InputStreamMultiSource.h"
 #include "InputStreamPVRChannel.h"
@@ -29,6 +30,7 @@
 #include "ServiceBroker.h"
 #include "addons/binary-addons/BinaryAddonManager.h"
 #include "Util.h"
+#include "utils/log.h"
 
 
 std::shared_ptr<CDVDInputStream> CDVDFactoryInputStream::CreateInputStream(IVideoPlayer* pPlayer, const CFileItem &fileitem, bool scanforextaudio)
@@ -143,8 +145,18 @@ std::shared_ptr<CDVDInputStream> CDVDFactoryInputStream::CreateInputStream(IVide
       }
     }
 
-    if (finalFileitem.IsType(".m3u8"))
-      return std::shared_ptr<CDVDInputStreamFFmpeg>(new CDVDInputStreamFFmpeg(finalFileitem));
+    if (finalFileitem.IsType(".m3u8") || finalFileitem.IsType(".php"))
+    {
+      if (fileitem.IsPVRChannelWithArchive() || fileitem.IsEPGWithArchive())
+      {
+        CLog::Log(LOGDEBUG, "%s: CDVDInputStreamFFmpegArchive", __FUNCTION__);
+        return std::shared_ptr<CDVDInputStreamFFmpegArchive>(new CDVDInputStreamFFmpegArchive(finalFileitem));
+      }
+      else
+      {
+        return std::shared_ptr<CDVDInputStreamFFmpeg>(new CDVDInputStreamFFmpeg(finalFileitem));
+      }
+    }
 
     if (finalFileitem.GetMimeType() == "application/vnd.apple.mpegurl")
       return std::shared_ptr<CDVDInputStreamFFmpeg>(new CDVDInputStreamFFmpeg(finalFileitem));
@@ -154,6 +166,7 @@ std::shared_ptr<CDVDInputStream> CDVDFactoryInputStream::CreateInputStream(IVide
   }
 
   // our file interface handles all these types of streams
+  CLog::Log(LOGDEBUG, "%s: All else failed, creating CDVDInputStreamFile", __FUNCTION__);
   return std::shared_ptr<CDVDInputStreamFile>(new CDVDInputStreamFile(finalFileitem,
                                                                       XFILE::READ_TRUNCATED |
                                                                       XFILE::READ_BITRATE |
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
index 8dc39442c9..c514cd97c7 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
@@ -30,7 +30,8 @@ enum DVDStreamType
   DVDSTREAM_TYPE_BLURAY = 11,
   DVDSTREAM_TYPE_PVRMANAGER = 12,
   DVDSTREAM_TYPE_MULTIFILES = 13,
-  DVDSTREAM_TYPE_ADDON = 14
+  DVDSTREAM_TYPE_ADDON = 14,
+  DVDSTREAM_TYPE_PVR_ARCHIVE = 15
 };
 
 #define SEEK_POSSIBLE 0x10 // flag used to check if protocol allows seeks
@@ -169,7 +170,7 @@ public:
    */
   virtual bool GetCacheStatus(XFILE::SCacheStatus *status) { return false; }
 
-  bool IsStreamType(DVDStreamType type) const { return m_streamType == type; }
+  virtual bool IsStreamType(DVDStreamType type) const { return m_streamType == type; }
   virtual bool IsEOF() = 0;
   virtual BitstreamStats GetBitstreamStats() const { return m_stats; }
 
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.cpp
new file mode 100644
index 0000000000..5127655d0d
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.cpp
@@ -0,0 +1,69 @@
+/*
+ *  Copyright (C) 2018 Arthur Liberman
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "DVDInputStreamFFmpegArchive.h"
+#include "ServiceBroker.h"
+#include "addons/PVRClient.h"
+#include "pvr/PVRManager.h"
+#include "utils/log.h"
+
+CDVDInputStreamFFmpegArchive::CDVDInputStreamFFmpegArchive(const CFileItem& fileitem)
+  : CDVDInputStreamFFmpeg(fileitem),
+    m_client(CServiceBroker::GetPVRManager().GetClient(fileitem))
+{ }
+
+int64_t CDVDInputStreamFFmpegArchive::GetLength()
+{
+  int64_t ret = 0;
+  if (m_client && m_client->GetLiveStreamLength(ret) != PVR_ERROR_NO_ERROR)
+  {
+    Times times = {0};
+    if (GetTimes(times) && times.ptsEnd >= times.ptsBegin)
+      ret = static_cast<int64_t>(times.ptsEnd - times.ptsBegin);
+  }
+  return ret;
+}
+
+bool CDVDInputStreamFFmpegArchive::GetTimes(Times &times)
+{
+  bool ret = false;
+  PVR_STREAM_TIMES streamTimes = {0};
+  if (m_client && m_client->GetStreamTimes(&streamTimes) == PVR_ERROR_NO_ERROR)
+  {
+    times.startTime = streamTimes.startTime;
+    times.ptsStart = static_cast<double>(streamTimes.ptsStart);
+    times.ptsBegin = static_cast<double>(streamTimes.ptsBegin);
+    times.ptsEnd = static_cast<double>(streamTimes.ptsEnd);
+    ret = true;
+  }
+  return ret;
+}
+
+int64_t CDVDInputStreamFFmpegArchive::Seek(int64_t offset, int whence)
+{
+  int64_t iPosition = -1;
+  if (m_client)
+    m_client->SeekLiveStream(offset, whence, iPosition);
+  return iPosition;
+}
+
+CURL CDVDInputStreamFFmpegArchive::GetURL()
+{
+  if (m_client)
+  {
+    if (m_item.HasEPGInfoTag())
+      m_client->FillEpgTagStreamFileItem(m_item);
+    else if (m_item.HasPVRChannelInfoTag())
+      m_client->FillChannelStreamFileItem(m_item);
+  }
+  return CDVDInputStream::GetURL();
+}
+
+bool CDVDInputStreamFFmpegArchive::IsStreamType(DVDStreamType type) const
+{
+    return CDVDInputStream::IsStreamType(type) || type == DVDSTREAM_TYPE_PVR_ARCHIVE;
+}
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.h
new file mode 100644
index 0000000000..f85f5036bc
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpegArchive.h
@@ -0,0 +1,34 @@
+/*
+ *  Copyright (C) 2018 Arthur Liberman
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "DVDInputStreamFFmpeg.h"
+
+namespace PVR
+{
+  class CPVRClient;
+}
+
+class CDVDInputStreamFFmpegArchive
+  : public CDVDInputStreamFFmpeg
+  , public CDVDInputStream::ITimes
+{
+public:
+    explicit CDVDInputStreamFFmpegArchive(const CFileItem& fileitem);
+
+    virtual bool IsStreamType(DVDStreamType type) const override;
+
+    int64_t GetLength() override;
+    int64_t Seek(int64_t offset, int whence) override;
+    CURL GetURL() override;
+    CDVDInputStream::ITimes* GetITimes() override { return this; }
+    bool GetTimes(Times &times);
+
+protected:
+    std::shared_ptr<PVR::CPVRClient> m_client;
+};
diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index df41b440e2..829afb5655 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -955,12 +955,28 @@ bool CPVRManager::FillStreamFileItem(CFileItem &fileItem)
   const CPVRClientPtr client = GetClient(fileItem);
   if (client)
   {
+    if (client->GetBackendName() == "IPTV Archive PVR Add-on")
+      client->CloseLiveStream();
     if (fileItem.IsPVRChannel())
       return client->FillChannelStreamFileItem(fileItem) == PVR_ERROR_NO_ERROR;
     else if (fileItem.IsPVRRecording())
       return client->FillRecordingStreamFileItem(fileItem) == PVR_ERROR_NO_ERROR;
     else if (fileItem.IsEPG())
-      return client->FillEpgTagStreamFileItem(fileItem) == PVR_ERROR_NO_ERROR;
+    {
+      PVR_ERROR error = client->FillEpgTagStreamFileItem(fileItem);
+      if (error == PVR_ERROR_NOT_IMPLEMENTED)
+      {
+        // PVR_ERROR_NOT_IMPLEMENTED is returned when Play EPG as Live TV is selected.
+        const std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetChannelForEpgTag(fileItem.GetEPGInfoTag());
+        if (channel)
+        {
+          fileItem = CFileItem(channel);
+          return client->FillChannelStreamFileItem(fileItem) == PVR_ERROR_NO_ERROR;
+        }
+      }
+
+      return error == PVR_ERROR_NO_ERROR;
+    }
   }
   return false;
 }
-- 
2.20.1.windows.1

