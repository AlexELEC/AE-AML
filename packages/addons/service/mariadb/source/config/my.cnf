# MariaDB database server configuration file.
#
# You can copy this file to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# escpecially if they contain "#" chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.
[client]
port		= 3306
socket	= /var/run/mysqld/mysqld.sock

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

# This was formally known as [safe_mysqld]. Both versions are currently parsed.
[mysqld_safe]
socket	= /var/run/mysqld/mysqld.sock
nice		= 0

[mysqld]
#
# * Basic Settings
#
user		  = root
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
port		  = 3306
basedir   = /storage/.kodi/addons/service.mariadb
datadir   = /storage/.kodi/userdata/addon_data/service.mariadb/data
log-error = /storage/.kodi/userdata/addon_data/service.mariadb/mysqld.log
tmpdir		= /tmp
#lc_messages_dir	= /usr/share/mysql
lc_messages	= en_US
skip-external-locking
# Kodi needs more for library (256K should probably be enough)
#thread_stack = 128K
thread_stack = 384K
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
#bind-address		= 127.0.0.1
#
# * Fine Tuning
#
max_connections		= 100
connect_timeout		= 5
wait_timeout			= 600
max_allowed_packet	= 16M
thread_cache_size   = 128
sort_buffer_size	= 4M
bulk_insert_buffer_size	= 16M
tmp_table_size		= 32M
max_heap_table_size	= 32M
#
# * MyISAM
#
# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched. On error, make copy and try a repair.
myisam_recover_options = BACKUP
key_buffer_size		= 128M
#open-files-limit	= 2000
#table_open_cache	= 400
table_open_cache	= 1000
myisam_sort_buffer_size	= 512M
concurrent_insert	= 2
read_buffer_size	= 2M
read_rnd_buffer_size	= 1M
#
# * Query Cache Configuration
#
# Cache only tiny result sets, so we can fit more in the query cache.
query_cache_limit		= 128K
query_cache_size		= 64M
# for more write intensive setups, set to DEMAND or OFF
#query_cache_type		= DEMAND
#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
#general_log_file        = /storage/.kodi/userdata/addon_data/service.mariadb/mysql.log
#general_log             = 1
#
# Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf.
#
# we do want to know about network errors and such
log_warnings		= 2
#
# Enable the slow query log to see queries with especially long duration
#slow_query_log[={0|1}]
slow_query_log_file	= /storage/.kodi/userdata/addon_data/mariadb-slow.log
long_query_time = 10
#log_slow_rate_limit	= 1000
log_slow_verbosity	= query_plan

#log-queries-not-using-indexes
#log_slow_admin_statements
#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
#server-id		= 1
#report_host		= master1
#auto_increment_increment = 2
#auto_increment_offset	= 1
# disable binary log
#log_bin		= /storage/.kodi/userdata/addon_data/service.mariadb/mariadb-bin
#log_bin_index		= /storage/.kodi/userdata/addon_data/service.mariadb/mariadb-bin.index
# not fab for performance, but safer
#sync_binlog		= 1
expire_logs_days	= 10
max_binlog_size         = 100M
# slaves
#relay_log		= /storage/.kodi/userdata/addon_data/service.mariadb/relay-bin
#relay_log_index	= /storage/.kodi/userdata/addon_data/service.mariadb/relay-bin.index
#relay_log_info_file	= /storage/.kodi/userdata/addon_data/service.mariadb/relay-bin.info
#log_slave_updates
#read_only
#
# If applications support it, this stricter sql_mode prevents some
# mistakes like inserting invalid dates etc.
#sql_mode		= NO_ENGINE_SUBSTITUTION,TRADITIONAL
#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
default_storage_engine	= InnoDB
# you can't just change log file size, requires special procedure
#innodb_log_file_size	= 50M

# optimizations https://forum.kodi.tv/showthread.php?tid=329046&pid=2708799 #pid2708799
#               https://discourse.coreelec.org/t/kodi-and-mariadb-part-2/513
#  innodb_buffer_pool_size=2G  # MariaDB recommends using 80% of your available memory but the default 1G might be enough. Always set to multiples of 1G.
#  innodb_buffer_pool_instances=2  # When innodb_buffer_pool_size is > 1G, MariaDB will split the pool in instances. They should be even dividers of 1G.
#  innodb_file_format=Barracuda  # Gone in 10.3 / This is an optimized storage engine not available in MySQL
#  innodb_log_block_size=4096  # Gone in 10.3 / Default is 512, when using an SSD or 4k drives, block size should be 4096
#  innodb_adaptive_hash_index=OFF  # For Kodi no benefit is gained from additional indexes. This should only be used with large databases.
#  character-set-server=utf8  # I really hope you all used this in MySQL already.  This avoids potential pitfalls with text in exotic codepages.
#  key-buffer-size=64k  # When not using MyISAM as storage engine, this buffer can be reduced to a minimum
#  skip-name-resolve  # Avoids name resolving in the local network, thus reducing overhead. That also means that all connections are done by IP only.
#  optimizer_search_depth=1  # Here we are, this is winner of the year.

innodb_buffer_pool_size	= 256M
innodb_log_buffer_size	= 8M
innodb_file_per_table	= 1
innodb_open_files	= 400
innodb_io_capacity	= 400
innodb_flush_method	= O_DIRECT
character-set-server=utf8    # This avoids potential pitfalls with text in exotic codepages.
#skip-name-resolve            # Avoids name resolving in the local network, thus reducing overhead. That also means that all connections are done by IP only.
# well, not really according to use cases :(
#optimizer_search_depth=0     # Here we are, this is winner of the year.

#
# * Security Features
#
# Read the manual, too, if you want chroot!
# chroot = /var/lib/mysql/
#
# For generating SSL certificates I recommend the OpenSSL GUI "tinyca".
#
# ssl-ca=/etc/mysql/cacert.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem

#
# * Galera-related settings
#
[galera]
# Mandatory settings
#wsrep_on=ON
#wsrep_provider=
#wsrep_cluster_address=
#binlog_format=row
#default_storage_engine=InnoDB
#innodb_autoinc_lock_mode=2
#
# Allow server to accept connections on all interfaces.
#
#bind-address=0.0.0.0
#
# Optional setting
#wsrep_slave_threads=1
#innodb_flush_log_at_trx_commit=0

[mysqldump]
quick
quote-names
max_allowed_packet	= 16M

[mysql]
#no-auto-rehash	# faster start of mysql but no tab completion

[isamchk]
key_buffer		= 16M
