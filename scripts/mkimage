#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
# Copyright (C) 2016-present Team LibreELEC (https://libreelec.tv)
# Copyright (C) 2018-present Team CoreELEC (https://coreelec.org)

################################################################################
# variables such as $ROOT $PATH etc... that are required for this
# script to work must be passed via env ... in scripts/image
################################################################################

# set variables
LE_TMP=$(mktemp -d)
SAVE_ERROR="${LE_TMP}/save_error"
DISK_LABEL=msdos

if [ -z "${SYSTEM_SIZE}" -o -z "${SYSTEM_PART_START}" ]; then
  echo "mkimage: SYSTEM_SIZE and SYSTEM_PART_START must be configured!"
  exit 1
fi

STORAGE_SIZE=32 # STORAGE_SIZE must be >= 32 !

DISK_START_PADDING=$(( (${SYSTEM_PART_START} + 2048 - 1) / 2048 ))
DISK_GPT_PADDING=1
DISK_SIZE=$(( ${DISK_START_PADDING} + ${SYSTEM_SIZE} + ${STORAGE_SIZE} + ${DISK_GPT_PADDING} ))
DISK_BASENAME="${TARGET_IMG}/${IMAGE_NAME}"
if [ -n "$SUBDEVICE" ]; then
  DISK_BASENAME="$DISK_BASENAME-$SUBDEVICE"
fi
DISK="${DISK_BASENAME}.img"

# functions
cleanup() {
  echo -e "image: cleanup...\n"
  rm -rf "${LE_TMP}"
}

show_error() {
  echo "image: An error has occurred..."
  echo
  if [ -s "${SAVE_ERROR}" ]; then
    cat "${SAVE_ERROR}"
  else
    echo "Folder ${LE_TMP} might be out of free space..."
  fi
  echo
  cleanup
  exit 1
}

trap cleanup SIGINT

# generate volume id for fat partition
UUID_1=$(date '+%d%m')
UUID_2=$(date '+%M%S')
FAT_SERIAL_NUMBER="${UUID_1}${UUID_2}"
UUID_SYSTEM="${UUID_1}-${UUID_2}"

# create an image
echo -e "\nimage: creating file $(basename ${DISK})..."
dd if=/dev/zero of="${DISK}" bs=1M count="${DISK_SIZE}" conv=fsync >"${SAVE_ERROR}" 2>&1 || show_error

# write a disklabel
echo "image: creating ${DISK_LABEL} partition table..."
parted -s "${DISK}" mklabel ${DISK_LABEL}
sync

# create part1
echo "image: creating part1..."
SYSTEM_PART_END=$(( ${SYSTEM_PART_START} + (${SYSTEM_SIZE} * 1024 * 1024 / 512) - 1 ))
parted -s "${DISK}" -a min unit s mkpart primary fat32 ${SYSTEM_PART_START} ${SYSTEM_PART_END}
parted -s "${DISK}" set 1 boot on
sync

# create part2
echo "image: creating part2..."
STORAGE_PART_START=$(( ${SYSTEM_PART_END} + 1 ))
STORAGE_PART_END=$(( ${STORAGE_PART_START} + (${STORAGE_SIZE} * 1024 * 1024 / 512) - 1 ))
parted -s "${DISK}" -a min unit s mkpart primary ext4 ${STORAGE_PART_START} ${STORAGE_PART_END}
sync

# create filesystem on part1
echo "image: creating filesystem on part1..."
OFFSET=$(( ${SYSTEM_PART_START} * 512 ))
HEADS=4
TRACKS=32
SECTORS=$(( ${SYSTEM_SIZE} * 1024 * 1024 / 512 / ${HEADS} / ${TRACKS} ))

shopt -s expand_aliases  # enables alias expansion in script
alias mformat="mformat -i ${DISK}@@${OFFSET} -h ${HEADS} -t ${TRACKS} -s ${SECTORS}"
alias mcopy="mcopy -i ${DISK}@@${OFFSET}"
alias mmd="mmd -i ${DISK}@@${OFFSET}"

mformat -v "${DISTRO_BOOTLABEL}" -N "${FAT_SERIAL_NUMBER}" ::
sync

if [ "${BOOTLOADER}" = "bcm2835-bootloader" ]; then
  # create bootloader configuration
  echo "image: creating bootloader configuration..."
  cat << EOF > "${LE_TMP}/cmdline.txt"
boot=UUID=${UUID_SYSTEM} disk=UUID=${UUID_STORAGE} quiet ${EXTRA_CMDLINE}
EOF

  mcopy "${LE_TMP}/cmdline.txt" ::

  # copy files
  echo "image: copying files to part1..."
  mcopy "${TARGET_IMG}/${IMAGE_NAME}.kernel" "::/${KERNEL_NAME}"
  mcopy "${TARGET_IMG}/${IMAGE_NAME}.system" ::/SYSTEM
  mcopy "${RELEASE_DIR}/target/KERNEL.md5" "::/${KERNEL_NAME}.md5"
  mcopy "${RELEASE_DIR}/target/SYSTEM.md5" ::/SYSTEM.md5

  mcopy "${RELEASE_DIR}/3rdparty/bootloader/bootcode.bin" ::
  mcopy "${RELEASE_DIR}/3rdparty/bootloader/fixup.dat" ::
  mcopy "${RELEASE_DIR}/3rdparty/bootloader/start.elf" ::
  mcopy "${RELEASE_DIR}/3rdparty/bootloader/config.txt" ::
  mcopy "${RELEASE_DIR}/3rdparty/bootloader/distroconfig.txt" ::

  if [ -f "${RELEASE_DIR}/3rdparty/bootloader/dt-blob.bin" ]; then
    mcopy "${RELEASE_DIR}/3rdparty/bootloader/dt-blob.bin" ::
  fi

  for dtb in "${RELEASE_DIR}/3rdparty/bootloader/"*.dtb ; do
    if [ -f "${dtb}" ]; then
      mcopy "${dtb}" ::/$(basename "${dtb}")
    fi
  done

  if [ -d "${RELEASE_DIR}/3rdparty/bootloader/overlays" ]; then
    mcopy -s "${RELEASE_DIR}/3rdparty/bootloader/overlays" ::
  fi

elif [ "${BOOTLOADER}" = "u-boot" -a \( -n "${UBOOT_SYSTEM}" -o "${UBOOT_VERSION}" = "vendor" \) ]; then
  # create bootloader configuration
  echo "image: creating bootloader configuration..."

  if [ "${UBOOT_VERSION}" != "vendor" ]; then
    DTB="$(${SCRIPTS}/uboot_helper ${PROJECT} ${DEVICE} ${UBOOT_SYSTEM} dtb)"

    if [ -f "${RELEASE_DIR}/3rdparty/bootloader/${DTB}" ]; then
      mcopy "${RELEASE_DIR}/3rdparty/bootloader/${DTB}" ::
    fi

    mkdir -p "${LE_TMP}/extlinux"

    cat << EOF > "${LE_TMP}/extlinux/extlinux.conf"
LABEL ${DISTRO}
  LINUX /${KERNEL_NAME}
  FDT /${DTB}
  APPEND boot=UUID=${UUID_SYSTEM} disk=UUID=${UUID_STORAGE} quiet ${EXTRA_CMDLINE}
EOF

    mcopy -s "${LE_TMP}/extlinux" ::
  fi

  if [ -f "${PROJECT_DIR}/${PROJECT}/devices/${DEVICE}/bootloader/mkimage" ]; then
    . "${PROJECT_DIR}/${PROJECT}/devices/${DEVICE}/bootloader/mkimage"
  elif [ -f "${PROJECT_DIR}/${PROJECT}/bootloader/mkimage" ]; then
    . "${PROJECT_DIR}/${PROJECT}/bootloader/mkimage"
  else
    echo "image: skipping u-boot. no mkimage script found"
  fi

  echo "image: copying files to part1..."
  mcopy "${TARGET_IMG}/${IMAGE_NAME}.kernel" "::/${KERNEL_NAME}"
  mcopy "${TARGET_IMG}/${IMAGE_NAME}.system" ::/SYSTEM
  mcopy "${RELEASE_DIR}/target/KERNEL.md5" "::/${KERNEL_NAME}.md5"
  mcopy "${RELEASE_DIR}/target/SYSTEM.md5" ::/SYSTEM.md5

elif [ "${BOOTLOADER}" = "u-boot" ]; then
  echo "to make an image using u-boot UBOOT_SYSTEM must be set"
  cleanup
  exit
fi # bootloader

# extract part2 from image to format and copy files
echo "image: extracting part2 from image..."
STORAGE_PART_COUNT=$(( ${STORAGE_PART_END} - ${STORAGE_PART_START} + 1 ))
sync
dd if="${DISK}" of="${LE_TMP}/part2.ext4" bs=512 skip="${STORAGE_PART_START}" count="${STORAGE_PART_COUNT}" conv=fsync >"${SAVE_ERROR}" 2>&1 || show_error

# create filesystem on part2
echo "image: creating filesystem on part2..."
mke2fs -F -q -t ext4 -m 0 "${LE_TMP}/part2.ext4"
tune2fs -L "${DISTRO_DISKLABEL}" -U ${UUID_STORAGE} "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || show_error
e2fsck -n "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || show_error
sync

# add resize mark
mkdir "${LE_TMP}/part2.fs"
touch "${LE_TMP}/part2.fs/.please_resize_me"
echo "image: populating filesystem on part2..."
populatefs -U -d "${LE_TMP}/part2.fs" "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || show_error
sync
e2fsck -n "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || show_error

# merge part2 back to disk image
echo "image: merging part2 back to image..."
dd if="${LE_TMP}/part2.ext4" of="${DISK}" bs=512 seek="${STORAGE_PART_START}" conv=fsync,notrunc >"${SAVE_ERROR}" 2>&1 || show_error

# extract part1 from image to run fsck
echo "image: extracting part1 from image..."
SYSTEM_PART_COUNT=$(( ${SYSTEM_PART_END} - ${SYSTEM_PART_START} + 1 ))
sync
dd if="${DISK}" of="${LE_TMP}/part1.fat" bs=512 skip="${SYSTEM_PART_START}" count="${SYSTEM_PART_COUNT}" conv=fsync >"${SAVE_ERROR}" 2>&1 || show_error
echo "image: checking filesystem on part1..."
fsck -n "${LE_TMP}/part1.fat" >"${SAVE_ERROR}" 2>&1 || show_error

# gzip
echo "image: compressing..."
pigz < "${DISK}" > "${DISK}".gz

# cleanup
cleanup
exit
